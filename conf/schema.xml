<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="DemoOnSolr" version="1.1">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       Applications should change this to reflect the nature of the search collection.
       version="1.1" is Solr's version number for the schema syntax and semantics.  It should
       not normally be changed by applications.
       1.0: multiValued attribute did not exist, all fields are multiValued by nature
       1.1: multiValued attribute introduced, false by default -->

  <types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in the
       org.apache.solr.analysis package.
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       - StrField and TextField support an optional compressThreshold which
       limits compression (if enabled in the derived fields) to values which
       exceed a certain size (in characters).
    -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->


    <!-- numeric field types that store and index the text
         value verbatim (and hence don't support range queries, since the
         lexicographic ordering isn't equal to the numeric ordering) -->
    <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
    <fieldType name="long" class="solr.LongField" omitNorms="true"/>
    <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
    <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>


    <!-- Numeric field types that manipulate the value into
         a string value that isn't human-readable in its internal form,
         but with a lexicographic ordering the same as the numeric ordering,
         so that range queries work correctly. -->
    <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>


    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day

         Consult the DateField javadocs for more information.
      -->
    <fieldType name="date" class="solr.TrieDateField" sortMissingLast="true" omitNorms="true" precisionStep="6" positionIncrementGap="100"/>

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_fgs" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
        so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
        Synonyms and stopwords are customized by external files, and stemming is enabled.
        Duplicate tokens at the same position (which may result from Stemmed Synonyms or
        WordDelim parts) are removed.
        -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>


    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="mappedLowerText" class="solr.TextField">
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="moreSortableString" class="solr.TextField">
      <analyzer>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^(?:(?i:a|an|the)\b\s)((\s*\S+)+\s*)$" replacement="$1"/>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="[-/\\–—]" replacement=" "/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="\s+" replacement=" "/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="[\.,;:()\[\]&lt;&gt;{}'&quot;!?]" replacement=""/>
      </analyzer>
    </fieldType>

    <!-- Only for auto-complete. -->
    <fieldType name="edgedText" class="solr.TextField">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            <!-- Max could be either shorter or longer? Tokens longer than maxGramSize may not be queriable on fields of this type.-->
            <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="16"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        </analyzer>
    </fieldType>

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string,
             which may include back refrences to portions of the orriginal
             string matched by the pattern.

             See the Java Regular Expression documentation for more
             infomation on pattern and replacement string syntax.

             http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed, any data added to
         them will be ignored outright
     -->
    <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField" />

     <!-- PID needs a new tokenized type for the PID that does no tokenizing.-->
    <fieldType name="text_keyword" class="solr.TextField">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (stopwords.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
	<filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
	<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
	<filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
	<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English, plus
	 aggressive word-splitting and autophrase features enabled.
	 This field is just like text_en, except it adds
	 WordDelimiterFilter to enable splitting and matching of
	 words on case-change, alpha numeric boundaries, and
	 non-alphanumeric chars.  This means certain compound word
	 cases will work, for example query "wi fi" will match
	 document "WiFi" or "wi-fi".
        -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text.
         It also has certain stop words and charactors removed from the beginning of the
         of the field to although for proper title sorting.
      -->
    <fieldType name="alphaOnlyTitleSort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string,
             which may include back references to portions of the original
             string matched by the pattern.

             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.

             http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
          -->
        <charFilter class="solr.PatternReplaceCharFilterFactory"
                pattern="^(\x22|\x27|\x5b|x28)*((an|a|the)\s)?(\x22|\x27|\x5b|\x28)*" replacement=""/>
      </analyzer>
    </fieldType>

    <fieldtype name="nospecchar_text" class="solr.TextField">
       <analyzer type="Index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ASCIIFoldingFilterFactory"/>
       </analyzer>
       <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ASCIIFoldingFilterFactory"/>

       </analyzer>
    </fieldtype>

    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

    <fieldType name="iso639Code" class="solr.TextField" omitNorms="true">
      <analyzer>
        <tokenizer class="solr.PatternTokenizerFactory" pattern="[;,]\s*" />
        <filter class="info.freelibrary.solr.ISO639ConversionFilterFactory" />
      </analyzer>
    </fieldType>

 </types>


 <fields>
   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a previously defined type from the <types> section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     compressed: [false] if this field should be stored using gzip compression
       (this will only apply if the field type is compressable; among
       the standard field types, only TextField and StrField are)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
   -->
   <field name="PID" type="string" indexed="true" stored="true" required="true"/>
   <field name="mods_full_xml" type="text"  indexed="false" stored="true" multiValued="false"/>

   <field name="PID_kw" type="text_keyword" indexed="true" stored="true" multiValued="false"/>

   <!-- catchall field, containing all other searchable text fields (implemented
        via copyField further on in this schema  -->
   <field name="catch_all_fields_mt" type="text" indexed="true" stored="false" multiValued="true"/>

   <!-- Here, default is used to create a "timestamp" field indicating
        When each document was indexed.
     -->
   <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>

   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
        will be used if the name matches any of the patterns.
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        Longer patterns will be matched first.  if equal size patterns
        both match, the first appearing in the schema will be used.  -->
   <dynamicField name="*_i"  type="sint"    indexed="true"  stored="true"/>
   <dynamicField name="*_mi"  type="sint"    indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>
   <dynamicField name="*_ss"  type="moreSortableString"  indexed="true"  stored="true"/>
   <dynamicField name="*_ms"  type="string"  indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_l"  type="slong"   indexed="true"  stored="true"/>
   <dynamicField name="*_ml"  type="slong"   indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
   <dynamicField name="*_mt"  type="text"    indexed="true"  stored="true" multiValued="true"/>
   <!-- Solr must parse through a stored, indexed field to construct highlighted snippets around search terms.
   The three options, termVectors, termPositions and termOffsets help Solr determine the locations in stored
   fields of the search parameters, so it doesn't have to scan through a complete stored field each time snippets are requested.
   This is of particular concern with large full-text (OCR) fields. -->
   <dynamicField name="*_hlt" type="text"    indexed="true"  stored="true" termVectors="true" termPositions="true" termOffsets="true"/>
   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
   <dynamicField name="*_f"  type="sfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_mf"  type="sfloat"  indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_d"  type="sdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_md"  type="sdouble" indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>
   <dynamicField name="*_mdt" type="date"    indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_et" type="edgedText" indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_mlt" type="mappedLowerText" indexed="true" stored="true" multiValued='false'/>
   <dynamicField name="*_ats" type="alphaOnlyTitleSort" indexed="true"  stored="false" multiValued="false"/>

   <!-- islandora_solution_pack_oralhistories setup. This may collide with other dynamic fields. Use at own risk. -->
   <!-- <dynamicField name="or_*" type="text" indexed="true" stored="true" multiValued="true"/> -->

   <!-- uncomment the following to ignore any fields that don't already match an existing
        field name or dynamic field, rather than reporting them as an error.
        alternately, change the type="ignored" to some other type e.g. "text" if you want
        unknown fields indexed and/or stored by default -->
   <field name="dc.description" type="text_fgs"  indexed="true"  stored="true" multiValued="true"/>

   <!-- These field definitions are all carried over from UCAR's original schema
        configuration. -->
   <field name="dc.publisher" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.publisher_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="dc.format" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.format_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="dc.type" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.type_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="dc.contributor" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.contributor_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="dc.language" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.language_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="dc.coverage" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.coverage_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="dc.subject" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.subject_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="dc.relation" type="text_en" indexed="true" stored="false" multiValued="true"/>
   <field name="dc.relation_s" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_language_languageTerm_code_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_originInfo_place_placeTerm_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_originInfo_publisher_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_originInfo_place_placeTerm_text_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_location_physicalLocation_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_name_namePart_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_name_role_roleTerm_text_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_typeOfResource_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_physicalDescription_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_relatedItem_titleInfo_title_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_topic_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_genre_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_geographic_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_temporal_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_hierarchicalGeographic_city_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_hierarchicalGeographic_province_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_hierarchicalGeographic_country_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_hierarchicalGeographic_continent_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_originInfo_dateIssued_dt" type="date" indexed="true"  stored="true" multiValued="true"/>
   <field name="keyDate" type="date" indexed="true"  stored="true" multiValued="false"/>
   <field name="keyDateYear" type="text_en_splitting" indexed="true"  stored="true" multiValued="false"/>
   <field name="keyDateYMD" type="text_en_splitting" indexed="true"  stored="true" multiValued="false"/>
   <field name="fullAffil" type="text_en_splitting" indexed="true"  stored="true" multiValued="true"/>
   <field name="dsmd.OBJ.Content-Type_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="mods_subject_cartographics_coordinates_coordinate" type="location" indexed="true" multiValued="true"/>
   <field name="mods_originInfo_dateOther_ms" type="string" multiValued="true" indexed="true" stored="true"/>
   <field name="iso639" type="iso639Code" indexed="true" multiValued="true" />
   <field name="fgs_label_s" type="string" indexed="true" stored="true" required="true" multiValued="false"/>
   <field name="fgs_label_ats" type="alphaOnlyTitleSort" indexed="true"  stored="false" multiValued="false"/>
   <field name="mods_titleInfo_title_nospec" type="nospecchar_text" indexed="true"  stored="true" multiValued="false"/>

   <dynamicField name="*" type="text_fgs"  indexed="true"  stored="true" multiValued="true"/>
   <field name="_version_" type="long" indexed="true" stored="true"/>

 </fields>

 <!-- Field to use to determine and enforce document uniqueness.
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>PID</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>dc.description</defaultSearchField>

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="OR"/>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.
        Copy fields do not follow transitive property.-->

  <copyField source="*_s" dest="*_mlt"/>
  <copyField source="*_s" dest="*_t"/>
  <copyField source="*_s" dest="*_ms"/>
  <copyField source="*_s" dest="*_mt"/>
  <copyField source="*_s" dest="*_ss"/>
  <copyField source="*_ms" dest="*_mt"/>
  <copyField source="*_dt" dest="*_mt"/>
  <copyField source="*_dt" dest="*_mdt"/>
  <copyField source="*_mdt" dest="*_mt"/>
  <copyField source="PID" dest="PID_kw"/>

  <!-- copyField commands copied over from UCAR's original schema. -->
  <copyField source="ucar_mods_name_personal_primary_author_sort_s" dest="mods_usage_primary_sort_s"/>
  <copyField source="ucar_mods_name_corporate_primary_author_sort_s" dest="mods_usage_primary_sort_s"/>
  <copyField source="mods_name_personal_author_affiliation_s" dest="fullAffil"/>
  <copyField source="mods_name_personal_author_affiliation_ms" dest="fullAffil"/>
  <copyField source="keyDate" dest="keyDateYear" maxChars="4"/>
  <copyField source="keyDate" dest="keyDateYMD" maxChars="10"/>
  <copyField source="fgs_label_s" dest="mods_titleInfo_title_nospec"/>
  <copyField source="mods_language_languageTerm_code_ms" dest="iso639"/>
  <copyField source="mods_originInfo_dateOther_dt" dest="mods_originInfo_dateOther_ms" />
  <copyField source="dsmd.OBJ.Content-Type" dest="dsmd.OBJ.Content-Type_ms" />
  <copyField source="mods_subject_cartographics_coordinates_ms" dest="mods_subject_cartographics_coordinates_coordinate"/>
  <copyField source="dc.relation" dest="dc.relation_s"/>
  <copyField source="dc.subject" dest="dc.subject_s"/>
  <copyField source="dc.publisher" dest="dc.publisher_s"/>
  <copyField source="dc.coverage" dest="dc.coverage_s"/>
  <copyField source="dc.contributor" dest="dc.contributor_s"/>
  <copyField source="dc.type" dest="dc.type_s"/>
  <copyField source="dc.language" dest="dc.language_s"/>
  <copyField source="dc.format" dest="dc.format_s"/>

  <!-- The following line is a bit of a performance hog, I would look to remove it if the indexing takes a long time. -->
  <copyField source="*" dest="catch_all_fields_mt"/>

 <!-- Similarity is the scoring routine for each document vs. a query.
      A custom similarity may be specified here, but the default is fine
      for most applications.  -->
 <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->

</schema>
